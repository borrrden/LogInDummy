cmake_minimum_required (VERSION 3.1)
cmake_policy(VERSION 3.1)
project (LogInDummy)
include(CheckIncludeFile)

option(LID_PNG "Whether or not to include PNG support" OFF)
option(EMBED_PNG "Whether or not to use embedded PNG library instead of system library (ignored if LIB_PNG is not set)" OFF)
option(LID_JPG "Whether or not to include JPEG support" OFF)
option(EMBED_JPG "Whether or not to use embedded JPEG library instead of system library (ignored if LIB_JPEG is not set)" OFF)
option(LID_TIFF "Whether or not to include TIFF support" OFF)
option(EMBED_TIFF "Whether or not to use embedded TIFF library instead of system library (ignored if LIB_TIFF is not set)" OFF)

if(WIN32)
    set(CMAKE_REQUIRED_DEFINITIONS -DIBM)
    add_definitions(-DIBM)
    set(variables
        CMAKE_C_FLAGS_DEBUG
        CMAKE_C_FLAGS_MINSIZEREL
        CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_RELWITHDEBINFO
        CMAKE_CXX_FLAGS_DEBUG
        CMAKE_CXX_FLAGS_MINSIZEREL
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_RELWITHDEBINFO)

        foreach(variable ${variables})
            string(REPLACE "/MD" "/MT" ${variable} "${${variable}}")
        endforeach()
elseif(APPLE)
    set(CMAKE_REQUIRED_DEFINITIONS -DAPL)
    add_definitions(-DAPL)
else()
    set(CMAKE_REQUIRED_DEFINITIONS -DLIN)
    add_definitions(-DLIN)
endif()

add_definitions(-DXPLM200 -DXPLM210 -DXPLM300 -DXPLM301)

include_directories("XPlaneSDK/CHeaders/XPLM" "XPlaneSDK/CHeaders/Widgets")
set(CMAKE_REQUIRED_INCLUDES "${CMAKE_SOURCE_DIR}/XPlaneSDK/CHeaders/XPLM/" "${CMAKE_SOURCE_DIR}/XPlaneSDK/CHeaders/Widgets/")
set(HEADER_FILES XPLMDataAccess.h XPLMPlugin.h XPLMProcessing.h XPLMUtilities.h XPLMMenus.h XPLMGraphics.h
    XPStandardWidgets.h XPWidgets.h)
#foreach(header_file ${HEADER_FILES})
#    unset(HAVE_XPLANE_HEADER CACHE)
#    check_include_file(${header_file} HAVE_XPLANE_HEADER)
#    if(NOT HAVE_XPLANE_HEADER)
#        message(FATAL_ERROR "Missing or corrupted required X-Plane SDK header!  See XPlaneSDK/INSTRUCTIONS.txt")
#    endif()
#endforeach()

if(WIN32)
    add_library(LogInDummy SHARED "src/DllMain.cpp" "src/LogInDummy.c" "src/config.c" "src/BitmapWidget.cc" "src/loaders/png_loader.c"
                                  "src/loaders/bmp_loader.c" "src/loaders/jpg_loader.c" "src/loaders/tiff_loader.c" "src/loaders/loaders.c")
    find_library(XPLM_LIB NAMES XPLM_64 HINTS "XPlaneSDK/Libraries/Win")
     if(NOT XPLM_LIB)
         message(FATAL_ERROR "XPLM_64.lib not found.  X-Plane SDK is corrupted")
     endif()

     find_library(XPWIDGETS_LIB NAMES XPWidgets_64 HINTS "XPlaneSDK/Libraries/Win")
     if(NOT XPWIDGETS_LIB)
         message(FATAL_ERROR "XPWidgets_64.lib not found.  X-Plane SDK is corrupted.")
     endif()

     target_link_libraries(LogInDummy ${XPLM_LIB} ${XPWIDGETS_LIB})
elseif(APPLE)
    add_library(LogInDummy SHARED "src/LogInDummy.c" "src/config.c" "src/BitmapWidget.cc" "src/loaders/png_loader.c"
                                  "src/loaders/bmp_loader.c" "src/loaders/jpg_loader.c" "src/loaders/tiff_loader.c" "src/loaders/loaders.c")
    find_library(XPLM_LIB NAMES XPLM HINTS "XPlaneSDK/Libraries/Mac")
    if(NOT XPLM_LIB)
        message(FATAL_ERROR "XPLM.framework not found.  X-Plane SDK is corrupted")
    endif()

    find_library(XPWIDGETS_LIB NAMES XPWidgets HINTS "XPlaneSDK/Libraries/Mac")
    if(NOT XPWIDGETS_LIB)
        message(FATAL_ERROR "XPWidgets.framework not found.  X-Plane SDK is corrupted.")
    endif()

    target_link_libraries(LogInDummy ${XPLM_LIB} ${XPWIDGETS_LIB})
else()
    add_library(LogInDummy SHARED "src/LogInDummy.c" "src/config.c" "src/BitmapWidget.cc" "src/loaders/png_loader.c"
                                  "src/loaders/bmp_loader.c" "src/loaders/jpg_loader.c" "src/loaders/tiff_loader.c" "src/loaders/loaders.c")
    set_target_properties(LogInDummy PROPERTIES LINK_FLAGS "-nodefaultlibs -undefined_warning")
endif()

if(LID_PNG)
    find_library(LIBPNG NAMES png)
    if(NOT LIBPNG OR EMBED_PNG)
        find_package(GIT)
        if(NOT GIT_FOUND)
            message(FATAL_ERROR "Unable to find Git executable!")
        endif()
        
        file(TO_NATIVE_PATH "${CMAKE_SOURCE_DIR}/vendor/zlib" ZLIB_DIR)
        file(TO_NATIVE_PATH "${CMAKE_SOURCE_DIR}/vendor/libpng" LIBPNG_DIR)
        if(NOT EXISTS ${ZLIB_DIR})
            file(MAKE_DIRECTORY ${ZLIB_DIR})
            execute_process(COMMAND ${GIT_EXECUTABLE} clone https://github.com/madler/zlib/ --depth 1 --branch v1.2.11 ${ZLIB_DIR})
        endif()
        
        if(NOT EXISTS ${LIBPNG_DIR})
            file(MAKE_DIRECTORY ${LIBPNG_DIR})
            execute_process(COMMAND ${GIT_EXECUTABLE} clone https://github.com/glennrp/libpng --depth 1 --branch libpng16 ${LIBPNG_DIR})
        endif()

        include_directories(${ZLIB_DIR} ${LIBPNG_DIR} ${CMAKE_BINARY_DIR}/vendor/zlib)
        add_subdirectory(${ZLIB_DIR})
        option(PNG_BUILD_ZLIB "Custom zlib Location, else find_package is used" ON)
        add_subdirectory(${LIBPNG_DIR})
        configure_file(${LIBPNG_DIR}/scripts/pnglibconf.h.prebuilt ${LIBPNG_DIR}/pnglibconf.h COPYONLY)
        target_link_libraries(LogInDummy zlibstatic png_static)
        add_definitions(-DHAVE_PNG)
    else()
        target_link_libraries(LogInDummy png)
        add_definitions(-DHAVE_PNG)
    endif()
endif()

if(LID_JPG OR EMBED_JPG)
    find_library(LIBJPG NAMES jpeg)
    if(NOT LIBJPG OR EMBED_JPG)
        find_package(GIT)
        if(NOT GIT_FOUND)
            message(FATAL_ERROR "Unable to find Git executable!")
        endif()
        
        file(TO_NATIVE_PATH "${CMAKE_SOURCE_DIR}/vendor/libjpeg" LIBJPG_DIR)
        if(NOT EXISTS ${LIBJPG_DIR})
            file(MAKE_DIRECTORY ${LIBJPG_DIR})
            execute_process(COMMAND ${GIT_EXECUTABLE} clone https://github.com/LuaDist/libjpeg --depth 1 ${LIBJPG_DIR})
        endif()

        include_directories(${LIBJPG_DIR} ${CMAKE_BINARY_DIR}/vendor/libjpeg)
        add_subdirectory(${LIBJPG_DIR})
        option(BUILD_STATIC ON)
        target_link_libraries(LogInDummy jpeg)
        add_definitions(-DHAVE_JPG)
    else()
        target_link_libraries(LogInDummy jpeg)
        add_definitions(-DHAVE_JPG)
    endif()
endif()

if(LID_TIFF)
    find_library(LIBTIFF NAMES tiff)
    if(NOT LIBTIFF OR EMBED_TIFF)
        find_package(GIT)
        if(NOT GIT_FOUND)
            message(FATAL_ERROR "Unable to find Git executable!")
        endif()
        
        file(TO_NATIVE_PATH "${CMAKE_SOURCE_DIR}/vendor/libtiff" LIBTIFF_DIR)
        if(NOT EXISTS ${LIBTIFF_DIR})
            file(MAKE_DIRECTORY ${LIBTIFF_DIR})
            execute_process(COMMAND ${GIT_EXECUTABLE} clone https://gitlab.com/libtiff/libtiff --depth 1 --branch Release-v4-0-9 ${LIBTIFF_DIR})
        endif()

        include_directories(${LIBTIFF_DIR}/libtiff ${CMAKE_BINARY_DIR}/vendor/libtiff/libtiff)
        set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libraries")
        add_subdirectory(${LIBTIFF_DIR})
        target_link_libraries(LogInDummy tiff)
        add_definitions(-DHAVE_TIFF)
    else()
        target_link_libraries(LogInDummy tiff)
        add_definitions(-DHAVE_TIFF)
    endif()
endif()

find_package(OpenGL REQUIRED)
include_directories(${OPENGL_INCLUDE_DIRS})
target_link_libraries(LogInDummy ${OPENGL_LIBRARIES})


message(STATUS "Optional Libraries:")
message(STATUS "")
if(NOT LID_PNG)
    message(STATUS "libPNG:\tDISABLED")
elseif(LIBPNG)
    message(STATUS "libPNG:\tFOUND (${LIBPNG}")
else()
    message(STATUS "libPNG:\tEMBEDDED")
endif()

if(NOT LID_JPG)
    message(STATUS "libJPEG:\tDISABLED")
elseif(LIBJPG)
    message(STATUS "libJPEG:\tFOUND (${LIBJPG})")
else()
    message(STATUS "libJPEG:\tEMBEDDED")
endif()

if(NOT LID_TIFF)
    message(STATUS "libTIFF:\tDISABLED")
elseif(LIBJPG)
    message(STATUS "libTIFF:\tFOUND (${LIBTIFF})")
else()
    message(STATUS "libTIFF:\tEMBEDDED")
endif()

message(STATUS "")

set_target_properties(LogInDummy PROPERTIES SUFFIX ".xpl")
